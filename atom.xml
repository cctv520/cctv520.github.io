<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cctv520.github.io</id>
    <title>六点半の天空</title>
    <updated>2020-03-21T08:32:31.889Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cctv520.github.io"/>
    <link rel="self" href="https://cctv520.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://cctv520.github.io/images/avatar.png</logo>
    <icon>https://cctv520.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 六点半の天空</rights>
    <entry>
        <title type="html"><![CDATA[用户注册与登录]]></title>
        <id>https://cctv520.github.io/post/yong-hu-zhu-ce-yu-deng-lu/</id>
        <link href="https://cctv520.github.io/post/yong-hu-zhu-ce-yu-deng-lu/">
        </link>
        <updated>2020-03-21T08:30:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="开发思路">开发思路</h3>
<ul>
<li>用户注册-&gt;注册完成后转到登陆页面</li>
<li>用户登录-&gt;登陆完成后转到用户资料页面</li>
<li>用户资料页面 -&gt; 查看用户注册信息, 并提供编辑资料按钮</li>
<li>用户资料编辑 -&gt; 编辑完成后转到用户资料查看页面</li>
<li>用户资料重置</li>
<li>用户退出登录</li>
</ul>
<h3 id="开发步骤">开发步骤</h3>
<p>由于Django Auth自带的User模型字段有限,我们还需要自定义模型UserProfile对其扩展.</p>
<p>Django Auth模块自带User模型所包含字段如下:</p>
<ul>
<li>username 	 用户名</li>
<li>email               邮箱</li>
<li>password       密码</li>
<li>first_name     名字</li>
<li>last_name      姓氏</li>
<li>is_active         是否为活跃用户(默认True)</li>
<li>is_staff             是否为员工(默认False)</li>
<li>is_superuser 是否为管理员(默认False)</li>
<li>date_joined   加入日期(系统自动生成)</li>
</ul>
<p>自定义的UserProfile模型字段:</p>
<ul>
<li>user               与User模型一对一的外键关系OnetoOneField</li>
<li>org                 用户名</li>
<li>telephone   电话</li>
<li>mod_date  最后修改时间</li>
</ul>
<h4 id="第一步-windows环境下创建虚拟环境建立mysite的django项目添加users的app并修改settingspy">第一步: (windows环境下)创建虚拟环境建立mysite的Django项目,添加users的app并修改settings.py</h4>
<pre><code class="language-cmd">$ pip install virtualenvwrapper-win
$ mkdir mysite &amp;&amp; cd mysite
$ mkvirtualenv mysite
$ workon mysite
(mysite)$ pip install django
(mysite)$ django-amdin startproject mysite .
(mysite)$ python manage.py startapp users
</code></pre>
<p>打开mysite/settings.py, 将users模型注册进去, 顺便把改为中文显示和北京时间</p>
<pre><code class="language-python"># mysite/settings.py
...
INSTALLED_APPS = [
    ...
    'users.apps.UsersConfig',  # new
] 
...
# LANGUAGES_CODE = 'en-us'
LANGUAGES_CODE = 'zh-hans'
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'
</code></pre>
<h4 id="第二步-在usersmodelspy里建立userprofile模型自定义的扩展用户信息model">第二步:  在users/models.py里建立UserProfile模型(自定义的扩展用户信息Model)</h4>
<pre><code class="language-python"># users/models.py
from django.db import models
from django.contrib.auth.models import User


class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    org = models.CharField('Organization', max_length=128, blank=True)
    telephone = models.CharField('Telephone', max_length=11, blank=True)
    mod_date = models.DateTimeField('Last modified', auto_now=True)
    
    class Meta:
        verbose_name = 'User Profile'
        verbose_name_plural = verbose_name
       
    def __str__(self):
        return self.user.username
</code></pre>
<p>创建数据库表并迁移</p>
<pre><code class="language-cmd">(mysite)$ python manage.py makemigrations users
(mysite)$ python manage.py migrate
</code></pre>
<h4 id="第三步-配置url">第三步: 配置URL</h4>
<p>在users中创建文件urls.py</p>
<pre><code class="language-python"># users/urls.py
from django.urls import path

from . import views


app_name = 'users'

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    path('user/&lt;int:pk&gt;/profile/', views.profile, name='profile'),
    path('user/&lt;int:pk&gt;/profiel/update/', views.profile_update, name='profile_update'),
    path('user/&lt;int:pk&gt;/pwdchange/', views.pwd_change, name='pwd_change'),
    paht('logout/', views.logout, name='logout'),
]
</code></pre>
<p>将users/urls.py加进项目目录mysite/urls.py中</p>
<pre><code class="language-python">#mysite/urls.py
...
from django.urls import path, include  # new

urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('users.urls')),  # new
]
</code></pre>
<h4 id="第四步-编写视图usersviewspy">第四步: 编写视图(users/views.py)</h4>
<p>根据users/urls.py中的路由可知,需要编写register注册和登录login两个视图函数,让用户通过表单向我们提交数据并处理. 这两个视图都需要用到表单,一个RegistrationForm, 一个LoginForm.</p>
<p>新建users/forms.py</p>
<pre><code class="language-python">#users/forms.py
import re

from django import forms
from django.contrib.auth.models import User

from .models import UserProfiel


def email_check(email):
    &quot;&quot;&quot;
    验证email合法性
    &quot;&quot;&quot;
    pattern = re.compole(r&quot;\?([-a-zA-Z0-9.`?{}]+@\w\.\w+)\?&quot;)
    return re.match(pattern, email)


class RegistrationForm(forms.Form):
    username = forms.CharField(label='Username', max_length=50)
    email = forms.EmailField(label='Email')
    password1 = forms.CharField(label='Password', widget=forms.PasswordInput)
    password2 = forms.CharField(label='ConfirmPassword', widget=forms.PasswordInput)
    '''User clean method to define custom validation rules'''
    def clean_username(self):
        username = self.cleaned_data.get('username')
        
        if len(username) &lt; 6:
            raise forms.ValidationError('Your username must be at least 6 characters long.')
        elif len(username) &gt; 50:
            raise forms.ValidationError('Your username is too long.')
        else:
            if User.objects.filter(username__exact=username).exists:
                raise forms.ValidationError(&quot;Your username already exists.&quot;)
        return username
    
    def clean_email(self):
        email = self.cleaned_data.get('email')
        if email_check(email):
           # if User.objects.filter(email__exact=email).exists:
            if User.objects.filter(email__exact=email).count()&gt;0:
                raise forms.ValidationError('Your email already exists.')
        else:
            raise forms.ValidationError('Please enter a valid email.')
        
        return email
    
    def clean_password1(self):
        password1 = self.cleaned_data.get('password1')
        
        if len(password) &lt; 6:
            raise forms.ValidationError('Your password is too short!')
        if len(password) &gt; 50:
            raise forms.ValidationError('Your password is too long.')
        
        return password1
    
    def clean_password2(self):
        password1 = self.cleaned_data.get('password1')
        password2 = self.cleaned_data.get('password2')
        
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError('Password mismatch. Please enter again.')
        return password2

    
class LoginForm(forms.Form):
    username = forms.CharField(label='username')
    password = forms.CharField(label='password', widget=forms.PasswordInput)
    
    def clean_username(self):
        username = self.cleaned_data.get('username')
        
        if email_check(username):
            if not User.objects.filter(email__exact=username).exists:
                raise forms.ValidationError('This email does not exist!')
        else:
            if not User.objects.filter(username__exact=username).exists:
                raise forms.ValidationError('This username does not exists.')
        
        return username    

</code></pre>
<p>forms.py可通过clean自定义方法表单验证,非常快捷,不用在views里在;进行验证,逻辑上更清晰.用clean方法加入很多表单验证,检查用户名/密码过短过长,是否存在等等...</p>
<p>编写users/views.py</p>
<pre><code class="language-python"># users/views.py
from django.shortcuts import render, get_object_or_404
from django.contrib.auth.models import User
from django.contrib import auth
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required

from .forms import RegistrationForm, LoginForm
from .models import UserProfile


def register(request):
    form = RegistrationForm()
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            email = form.cleaned_data.get('email')
            password = form.cleaned_data.get('password')
            # 使用内置User自带的create_user方法创建用户,不需要使用save()
            user = User.objects.create_user(username=username, password=password, email=email)
            # 如果使用objects.create()方法不需要使用save()
            user_profile = UserProfile(user=user)
            user_profile.save()
            
            return HttpResponseRedirect(reverse('users:login'))
    context = dict(
        forms=forms,
    )
    return render(request, 'users/registration.html', context)


def login(request):
    form = LoginForm()
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleanded_data.get('password')
            
            user = auth.authenticate(username=username, password=password)
            if user is not None and user.is_active:
                auth.login(user)
                return HttpResponseRedirect(reverse('users:profile', args=[user.id]))
            else:
                # 登陆失败
                context = dict(
                    form=form,
                    message='Wrong password.Please try again.'
                )
                return render(request, 'users/login.html', context)
        
        context = dict(
            form=form,
        )
        return render(request, 'users/login.html', context)

</code></pre>
<p>views.register函数的工作流程:</p>
<ul>
<li>当用户通过post方法提交表单,先验证RegistrationForm的数据是否有效,如果有效,通过User模型自带的create_user方法创建user实例,然后创建user_profile实例.用户通过一张表单提交数据,分表储存在两张表里.</li>
<li>如果注册成功,通过HttpResponseRedirect方法跳转到登陆页面</li>
<li>如果用户没有提交表单或不是通过POST方法提交表单,则注册页面,生成一张空的表单页面.</li>
</ul>
<p>views.login函数的工作流程:</p>
<ul>
<li>当用户通过POST方法提交表单,验证LoginForm的数据是否有效.如果有效,通过调用Django自带的authenticate方法来验证用户名和密码是否正确(若果真诠则返回一个user实例,没有则返回None), 如果用户数据存在,且用户是活跃的,则调用auth.login进行登录.</li>
<li>如果用户登录失败,则会重新跳转到登陆页面,并返回错误信息</li>
<li>如果用户登录成功,则通过HttpResponseRedirect方法跳转到用户个人信息页面</li>
<li>如果用户没有提交表单或不是通过POST方法提交表单,则跳转到登录页面,生成一张空表单.</li>
</ul>
<h3 id="第五步编写html模板template">第五步:编写HTML模板(Template)</h3>
<p>在users文件夹内创建templates文件夹和templates/users文件夹,编写registration.html和login.html模板.</p>
<pre><code class="language-html">&lt;!--templates/users/registration.html --&gt;
{% block content %}
&lt;div class=&quot;form-wrapper&quot;&gt;
    &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
        {% csrf_token %}
        {% for field in form %}
        &lt;div class=&quot;fieldWrapper&quot;&gt;
            {{ field.errors }}
            {{ field.label_tag }} {{ field }}
            {% if field.help_text %}
            &lt;p class=&quot;help&quot;&gt;
              {{ field.help_text|safe }}      
            &lt;/p&gt;
            {% endif %}
        &lt;/div&gt;
        {% endfor %}
        &lt;button type=&quot;submit&quot;&gt;
            Submit
        &lt;/button&gt;
    &lt;/form&gt;
&lt;/div&gt;
{% endblock %}
</code></pre>
<pre><code class="language-html">&lt;!-- users/login.html --&gt;
{% block content %}
&lt;h2&gt;Login&lt;/h2&gt;
{% if message %}
&lt;p&gt;{{ message }}&lt;/p&gt;
{% endif%}
&lt;div class=&quot;form-wrapper&quot;&gt;
    &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
        {% csrf_token %}
        {% for field in form %}
        &lt;div&gt;
            {{ field.errors }}
            {{ field.label_tag }} {{ field }}
            {% if field.help_text %}
            {{ field.help_text|safe }}
            {% endif %}
        &lt;/div&gt;
        {% endfor %}
        &lt;button type=&quot;submit&quot;&gt;
            Login
        &lt;/button&gt;
    &lt;/form&gt;
    &lt;a href=&quot;{% url 'users:login' %}&quot;&gt;Register&lt;/a&gt;
&lt;/div&gt;
{% endblock %}
</code></pre>
<h3 id="第六步-实战效果">第六步: 实战效果</h3>
<pre><code class="language-cmd">(mysite)$ python manage.py runserver
</code></pre>
]]></content>
    </entry>
</feed>